/** 
 * generated by Xtext 2.14.0
 */
package ic.ac.uk.xdrone.web
import java.net.InetSocketAddress
import java.net.URI
import org.eclipse.jetty.annotations.AnnotationConfiguration
import org.eclipse.jetty.server.Server
import org.eclipse.jetty.util.log.Slf4jLog
import org.eclipse.jetty.webapp.Configuration
import org.eclipse.jetty.webapp.MetaInfConfiguration
import org.eclipse.jetty.webapp.WebAppContext
import org.eclipse.jetty.webapp.WebInfConfiguration
import org.eclipse.jetty.webapp.WebXmlConfiguration
import org.eclipse.xtext.xbase.lib.Exceptions
import org.eclipse.xtext.xbase.lib.ObjectExtensions
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1
/** 
 * This program starts an HTTP server for testing the web integration of your DSL.
 * Just execute it and point a web browser to http://localhost:8080/
 */
@SuppressWarnings("all")class ServerLauncher {
	def static void main(String[] args) {
		var InetSocketAddress _inetSocketAddress=new InetSocketAddress("localhost",8080) 
		val Server server=new Server(_inetSocketAddress) 
		var WebAppContext _webAppContext=new WebAppContext() 
		val Procedure1<WebAppContext> _function=[WebAppContext it | {
			it.setResourceBase("WebRoot") 
			it.setWelcomeFiles(#["index.html"]) 
			it.setContextPath("/") 
			var AnnotationConfiguration _annotationConfiguration=new AnnotationConfiguration() 
			var WebXmlConfiguration _webXmlConfiguration=new WebXmlConfiguration() 
			var WebInfConfiguration _webInfConfiguration=new WebInfConfiguration() 
			var MetaInfConfiguration _metaInfConfiguration=new MetaInfConfiguration() 
			it.setConfigurations(#[_annotationConfiguration, _webXmlConfiguration, _webInfConfiguration, _metaInfConfiguration]) 
			it.setAttribute(WebInfConfiguration.CONTAINER_JAR_PATTERN, ".*/ic\\.ac\\.uk\\.xdrone\\.web/.*,.*\\.jar") 
			it.setInitParameter("org.mortbay.jetty.servlet.Default.useFileMappedBuffer", "false") 
		}] 
		var WebAppContext _doubleArrow=ObjectExtensions.<WebAppContext>operator_doubleArrow(_webAppContext, _function) 
		server.setHandler(_doubleArrow) 
		var String _name=ServerLauncher.getName() 
		val Slf4jLog log=new Slf4jLog(_name) 
		try {
			server.start() 
			var URI _uRI=server.getURI() 
			var String _plus=('''Server started «_uRI»''') 
			var String _plus_1=('''«_plus»...''') 
			log.info(_plus_1) 
			val Runnable _function_1=[{
				try {
					log.info("Press enter to stop the server...") 
					val int key=System.in.read() 
					if ((key !== (-1))) {
						server.stop() 
					} else {
						log.warn("Console input is not available. In order to stop the server, you need to cancel process manually.") 
					}
				} catch (Throwable _e) {
					throw Exceptions.sneakyThrow(_e)
				}
				
			}] 
			new Thread(_function_1).start() 
			server.join() 
		} catch (Throwable _t) {
			if (_t instanceof Exception) {
				val Exception exception=(_t as Exception) 
				log.warn(exception.getMessage()) 
				System.exit(1) 
			} else {
				throw Exceptions.sneakyThrow(_t)
			}
		}
		
	}
}