/** 
 * generated by Xtext 2.10.0
 */
package ic.ac.uk.xdrone.web
import com.google.inject.Inject
import java.io.File
import java.io.FileWriter
import org.eclipse.emf.common.util.URI
import org.eclipse.xtext.web.server.IServiceContext
import org.eclipse.xtext.web.server.IServiceResult
import org.eclipse.xtext.web.server.InvalidRequestException
import org.eclipse.xtext.web.server.ServiceConflictResult
import org.eclipse.xtext.web.server.XtextServiceDispatcher
import org.eclipse.xtext.web.server.generator.GeneratorService
import org.eclipse.xtext.web.server.model.DocumentStateResult
import org.eclipse.xtext.web.server.model.XtextWebDocument
import org.eclipse.xtext.web.server.model.XtextWebDocumentAccess
import org.eclipse.xtext.web.server.persistence.IResourceBaseProvider
import org.eclipse.xtext.xbase.lib.Exceptions
import org.eclipse.xtext.xbase.lib.Functions.Function0
import org.eclipse.xtext.xbase.lib.InputOutput
import org.eclipse.xtext.xbase.lib.ObjectExtensions
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1
@SuppressWarnings("all")class XDroneServiceDispatcher extends XtextServiceDispatcher {
	@Inject IResourceBaseProvider resourceBaseProvider
	@Inject GeneratorService generatorService
	override protected XtextServiceDispatcher.ServiceDescriptor createServiceDescriptor(String serviceType, IServiceContext context) {
		var XtextServiceDispatcher.ServiceDescriptor _switchResult=null 
		if (serviceType !== null) {
			
			switch (serviceType) {
				case "deploy":/* FIXME unsupported fall-through */{
					_switchResult=this.getDeployService(context) /* FIXME Unsupported BreakStatement */ break
				}
				case "compile":/* FIXME unsupported fall-through */{
					_switchResult=this.getCompileService(context) /* FIXME Unsupported BreakStatement */ break
				}
				case "emergencystop":/* FIXME unsupported fall-through */{
					_switchResult=this.getStopService(context) /* FIXME Unsupported BreakStatement */ break
				}
				default :{
					_switchResult=super.createServiceDescriptor(serviceType, context) /* FIXME Unsupported BreakStatement */ break
				}
			}
		} else {
			_switchResult=super.createServiceDescriptor(serviceType, context) 
		}
		return _switchResult 
	}
	def protected XtextServiceDispatcher.ServiceDescriptor getCompileService(IServiceContext context) throws InvalidRequestException {
		var XtextServiceDispatcher.ServiceDescriptor _xblockexpression=null 
		{
			val String resourceId=context.getParameter("resource") 
			if ((resourceId === null)) {
				throw new InvalidRequestException("The parameter \'resource\' is required.")
			}
			val XtextWebDocumentAccess document=this.getDocumentAccess(context) 
			InputOutput.<XtextWebDocumentAccess>println(document) 
			var XtextServiceDispatcher.ServiceDescriptor _serviceDescriptor=new XtextServiceDispatcher.ServiceDescriptor() 
			val Procedure1<XtextServiceDispatcher.ServiceDescriptor> _function=[XtextServiceDispatcher.ServiceDescriptor it | {
				val Function0<IServiceResult> _function_1=[{
					var IServiceResult _xtrycatchfinallyexpression=null 
					try {
						_xtrycatchfinallyexpression=this.generatorService.getResult(document) 
					} catch (Throwable _t) {
						if (_t instanceof Throwable) {
							val Throwable throwable=(_t as Throwable) 
							_xtrycatchfinallyexpression=this.handleError(it, throwable) 
						} else {
							throw Exceptions.sneakyThrow(_t)
						}
					}
					
					return _xtrycatchfinallyexpression 
				}] 
				it.setService(_function_1) 
			}] 
			_xblockexpression=ObjectExtensions.<XtextServiceDispatcher.ServiceDescriptor>operator_doubleArrow(_serviceDescriptor, _function) 
		}
		return _xblockexpression 
	}
	def protected XtextServiceDispatcher.ServiceDescriptor getStopService(IServiceContext context) throws InvalidRequestException {
		var XtextServiceDispatcher.ServiceDescriptor _xblockexpression=null 
		{
			val String resourceId=context.getParameter("resource") 
			if ((resourceId === null)) {
				throw new InvalidRequestException("The parameter \'resource\' is required.")
			}
			var XtextServiceDispatcher.ServiceDescriptor _serviceDescriptor=new XtextServiceDispatcher.ServiceDescriptor() 
			val Procedure1<XtextServiceDispatcher.ServiceDescriptor> _function=[XtextServiceDispatcher.ServiceDescriptor it | {
				val Function0<IServiceResult> _function_1=[{
					var ServiceConflictResult _xtrycatchfinallyexpression=null 
					try {
						val URI uri=this.resourceBaseProvider.getFileURI(resourceId) 
						var String _fileString=uri.toFileString() 
						val File file=new File(_fileString) 
						var FileWriter writer=null 
						try {
							var FileWriter _fileWriter=new FileWriter(file) 
							writer=_fileWriter 
							val String fullText=context.getParameter("fullText") 
							if ((fullText !== null)) {
								writer.write(fullText) 
							}
						} finally {
							if ((writer !== null)) {
								writer.close() 
							}
						}
						val XtextWebDocument document=this.getResourceDocument(resourceId, context) 
						InputOutput.<String>println("preparing to run command: /xdrone/xdrone-emergencystop.sh") 
						val Process pb=new ProcessBuilder().inheritIO().command("/xdrone/xdrone-emergencystop.sh").start() 
						var boolean _isAlive=pb.isAlive() 
						var boolean _not=(!_isAlive) 
						if (_not) {
							var int _exitValue=pb.exitValue() 
							var String _plus=('''exit code: «Integer.valueOf(_exitValue)»''') 
							InputOutput.<String>println(_plus) 
						}
						var String _stateId=document.getStateId() 
						return new DocumentStateResult(_stateId) 
					} catch (Throwable _t) {
						if (_t instanceof Throwable) {
							val Throwable throwable=(_t as Throwable) 
							_xtrycatchfinallyexpression=this.handleError(it, throwable) 
						} else {
							throw Exceptions.sneakyThrow(_t)
						}
					}
					
					return _xtrycatchfinallyexpression 
				}] 
				it.setService(_function_1) 
				it.setHasSideEffects(true) 
			}] 
			_xblockexpression=ObjectExtensions.<XtextServiceDispatcher.ServiceDescriptor>operator_doubleArrow(_serviceDescriptor, _function) 
		}
		return _xblockexpression 
	}
	def protected XtextServiceDispatcher.ServiceDescriptor getDeployService(IServiceContext context) throws InvalidRequestException {
		var XtextServiceDispatcher.ServiceDescriptor _xblockexpression=null 
		{
			val String resourceId=context.getParameter("resource") 
			if ((resourceId === null)) {
				throw new InvalidRequestException("The parameter \'resource\' is required.")
			}
			var XtextServiceDispatcher.ServiceDescriptor _serviceDescriptor=new XtextServiceDispatcher.ServiceDescriptor() 
			val Procedure1<XtextServiceDispatcher.ServiceDescriptor> _function=[XtextServiceDispatcher.ServiceDescriptor it | {
				val Function0<IServiceResult> _function_1=[{
					var ServiceConflictResult _xtrycatchfinallyexpression=null 
					try {
						val URI uri=this.resourceBaseProvider.getFileURI(resourceId) 
						var String _fileString=uri.toFileString() 
						val File file=new File(_fileString) 
						var FileWriter writer=null 
						try {
							var FileWriter _fileWriter=new FileWriter(file) 
							writer=_fileWriter 
							val String fullText=context.getParameter("fullText") 
							if ((fullText !== null)) {
								writer.write(fullText) 
							}
						} finally {
							if ((writer !== null)) {
								writer.close() 
							}
						}
						val XtextWebDocument document=this.getResourceDocument(resourceId, context) 
						var String _absolutePath=file.getAbsolutePath() 
						var String _plus=('''preparing to run command: /bin/bash -c /xdrone/xdrone-deploy.sh «_absolutePath»''') 
						var String _plus_1=('''«_plus» > /tmp/xdrone.log''') 
						InputOutput.<String>println(_plus_1) 
						var ProcessBuilder _inheritIO=new ProcessBuilder().inheritIO() 
						var String _absolutePath_1=file.getAbsolutePath() 
						var String _plus_2=('''/xdrone/xdrone-deploy.sh «_absolutePath_1»''') 
						var String _plus_3=('''«_plus_2» > /tmp/xdrone.log''') 
						val Process pb=_inheritIO.command("/bin/bash", "-c", _plus_3).start() 
						var boolean _isAlive=pb.isAlive() 
						var boolean _not=(!_isAlive) 
						if (_not) {
							var int _exitValue=pb.exitValue() 
							var String _plus_4=('''exit code: «Integer.valueOf(_exitValue)»''') 
							InputOutput.<String>println(_plus_4) 
						}
						var String _stateId=document.getStateId() 
						return new DocumentStateResult(_stateId) 
					} catch (Throwable _t) {
						if (_t instanceof Throwable) {
							val Throwable throwable=(_t as Throwable) 
							_xtrycatchfinallyexpression=this.handleError(it, throwable) 
						} else {
							throw Exceptions.sneakyThrow(_t)
						}
					}
					
					return _xtrycatchfinallyexpression 
				}] 
				it.setService(_function_1) 
				it.setHasSideEffects(true) 
			}] 
			_xblockexpression=ObjectExtensions.<XtextServiceDispatcher.ServiceDescriptor>operator_doubleArrow(_serviceDescriptor, _function) 
		}
		return _xblockexpression 
	}
}